import React, { useState } from 'react';
import { View, Text, StyleSheet, SafeAreaView, Image, ScrollView, TouchableOpacity, Dimensions, FlatList, Button } from 'react-native';
import { FontAwesome } from '@expo/vector-icons';
import { useRouter } from 'expo-router';
import PhenologicalJournal from './phenologicalJournal';


const { width } = Dimensions.get('window');

const PlantDetailsScreen = () => {
  const [activeTab, setActiveTab] = useState('care');
  const [activeImageIndex, setActiveImageIndex] = useState(0);
  const [isFavorite, setIsFavorite] = useState(false);
  const router = useRouter();

  const toggleFavorite = () => setIsFavorite(!isFavorite);
  // –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Ç–µ–Ω–∏—è
  const plantData = {
    name: "–ú–æ–Ω—Å—Ç–µ—Ä–∞",
    latinName: "Monstera deliciosa",
    images: [
      "https://via.placeholder.com/400x300/1a1a1a/ffffff?text=–ú–æ–Ω—Å—Ç–µ—Ä–∞+1",
      "https://via.placeholder.com/400x300/1a1a1a/ffffff?text=–ú–æ–Ω—Å—Ç–µ—Ä–∞+2",
      "https://via.placeholder.com/400x300/1a1a1a/ffffff?text=–ú–æ–Ω—Å—Ç–µ—Ä–∞+3",
    ],
    care: {
      watering: {
        text: "–£–º–µ—Ä–µ–Ω–Ω—ã–π –ø–æ–ª–∏–≤, –¥–∞—Ç—å –ø—Ä–æ—Å–æ—Ö–Ω—É—Ç—å –≤–µ—Ä—Ö–Ω–µ–º—É —Å–ª–æ—é –ø–æ—á–≤—ã –º–µ–∂–¥—É –ø–æ–ª–∏–≤–∞–º–∏.",
        frequency: "1-2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é –ª–µ—Ç–æ–º, –∑–∏–º–æ–π —Ä–µ–∂–µ",
        amount: "–°—Ä–µ–¥–Ω–∏–π",
        icon: "üíß"
      },
      light: {
        text: "–Ø—Ä–∫–∏–π —Ä–∞—Å—Å–µ—è–Ω–Ω—ã–π —Å–≤–µ—Ç, –±–µ–∑ –ø—Ä—è–º—ã—Ö —Å–æ–ª–Ω–µ—á–Ω—ã—Ö –ª—É—á–µ–π. –ú–æ–∂–µ—Ç —Ä–∞—Å—Ç–∏ –≤ –ø–æ–ª—É—Ç–µ–Ω–∏.",
        level: 70, // –ø—Ä–æ—Ü–µ–Ω—Ç —è—Ä–∫–æ—Å—Ç–∏
        icon: "‚òÄÔ∏è"
      },
      allergies: {
        text: "–°–æ–¥–µ—Ä–∂–∏—Ç –æ–∫—Å–∞–ª–∞—Ç –∫–∞–ª—å—Ü–∏—è, —è–¥–æ–≤–∏—Ç–∞ –¥–ª—è –¥–æ–º–∞—à–Ω–∏—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö –ø—Ä–∏ –ø—Ä–æ–≥–ª–∞—Ç—ã–≤–∞–Ω–∏–∏.",
        icons: ["üê±", "üê∂", "üë∂"],
        icon: "‚ö†Ô∏è"
      },
      humidity: {
        text: "–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç –≤—ã—Å–æ–∫—É—é –≤–ª–∞–∂–Ω–æ—Å—Ç—å.",
        level: 75, // –ø—Ä–æ—Ü–µ–Ω—Ç –≤–ª–∞–∂–Ω–æ—Å—Ç–∏
        recommendation: "–†–µ–≥—É–ª—è—Ä–Ω–æ–µ –æ–ø—Ä—ã—Å–∫–∏–≤–∞–Ω–∏–µ –∏–ª–∏ —É–≤–ª–∞–∂–Ω–∏—Ç–µ–ª—å –≤–æ–∑–¥—É—Ö–∞",
        icon: "üí®"
      },
      problems: {
        list: [
          "–ü–æ–∂–µ–ª—Ç–µ–Ω–∏–µ –ª–∏—Å—Ç—å–µ–≤ ‚Äî –ø–µ—Ä–µ–ø–æ–ª–∏–≤",
          "–ö–æ—Ä–∏—á–Ω–µ–≤—ã–µ –∫–æ–Ω—á–∏–∫–∏ ‚Äî –Ω–∏–∑–∫–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å",
          "–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ—Ä–µ–∑–µ–π –≤ –ª–∏—Å—Ç—å—è—Ö ‚Äî –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –æ—Å–≤–µ—â–µ–Ω–∏—è"
        ],
        icon: "üîç"
      },
      soil: {
        text: "–†—ã—Ö–ª—ã–π, –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã–π —Å—É–±—Å—Ç—Ä–∞—Ç —Å —Ö–æ—Ä–æ—à–∏–º –¥—Ä–µ–Ω–∞–∂–µ–º.",
        components: [
          { name: "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≥—Ä—É–Ω—Ç", ratio: "60%" },
          { name: "–ü–µ—Ä–ª–∏—Ç", ratio: "20%" },
          { name: "–ö–æ–∫–æ—Å–æ–≤–æ–µ –≤–æ–ª–æ–∫–Ω–æ", ratio: "20%" }
        ],
        icon: "üå±"
      },
      temperature: {
        summer: { min: 21, max: 30, icon: "üåû" },
        winter: { min: 16, max: 22, icon: "‚ùÑÔ∏è" },
        indoors: { min: 18, max: 27, icon: "üè†" },
        outdoors: { min: 18, max: 32, icon: "üå≥" },
        icon: "üå°Ô∏è"
      },
      flowering: {
        text: "–†–µ–¥–∫–æ —Ü–≤–µ—Ç–µ—Ç –≤ –¥–æ–º–∞—à–Ω–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö.",
        period: "–í–µ—Å–Ω–∞-–ª–µ—Ç–æ",
        icon: "üå∏"
      },
      repotting: {
        text: "–ö–∞–∂–¥—ã–µ 2-3 –≥–æ–¥–∞ –≤–µ—Å–Ω–æ–π. –ú–æ–ª–æ–¥—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –º–æ–∂–Ω–æ –ø–µ—Ä–µ—Å–∞–∂–∏–≤–∞—Ç—å –µ–∂–µ–≥–æ–¥–Ω–æ.",
        nextDate: "–ê–ø—Ä–µ–ª—å 2026",
        icon: "ü™¥"
      },
      leafCleaning: {
        text: "–ü—Ä–æ—Ç–∏—Ä–∞—Ç—å –≤–ª–∞–∂–Ω–æ–π —Ç–∫–∞–Ω—å—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—ã–ª–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ñ–æ—Ç–æ—Å–∏–Ω—Ç–µ–∑–∞.",
        frequency: "–ö–∞–∂–¥—ã–µ 2-3 –Ω–µ–¥–µ–ª–∏",
        icon: "üßπ"
      },
      flowerColor: {
        text: "–ö—Ä–µ–º–æ–≤–æ-–±–µ–ª—ã–µ —Å–æ—Ü–≤–µ—Ç–∏—è (–ø–æ—á–∞—Ç–æ–∫ —Å –ø–æ–∫—Ä—ã–≤–∞–ª–æ–º).",
        colors: ["#F5F5DC", "#FFFFFF"],
        icon: "üé®"
      },
      size: {
        text: "–í –¥–æ–º–∞—à–Ω–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö –º–æ–∂–µ—Ç –¥–æ—Å—Ç–∏–≥–∞—Ç—å 2-3 –º–µ—Ç—Ä–æ–≤ –≤ –≤—ã—Å–æ—Ç—É –∏ 1-2 –º–µ—Ç—Ä–∞ –≤ —à–∏—Ä–∏–Ω—É.",
        height: { min: 2, max: 3, unit: "–º" },
        width: { min: 1, max: 2, unit: "–º" },
        icon: "üìè"
      },
      history: {
        text: "–†–æ–¥–æ–º –∏–∑ —Ç—Ä–æ–ø–∏—á–µ—Å–∫–∏—Ö –ª–µ—Å–æ–≤ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –∏ –Æ–∂–Ω–æ–π –ê–º–µ—Ä–∏–∫–∏. –ü–æ–ø—É–ª—è—Ä–Ω–æ–µ –∫–æ–º–Ω–∞—Ç–Ω–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ —Å 1950-—Ö –≥–æ–¥–æ–≤.",
        origin: "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∏ –Æ–∂–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞",
        icon: "üåç"
      },
      difficulty: {
        text: "–°—Ä–µ–¥–Ω—è—è. –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è –∫ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏ –∏ –æ—Å–≤–µ—â–µ–Ω–∏—é.",
        level: 2, // –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 5
        icon: "‚≠ê"
      }
    },
  };

  const handleTabPress = (tab) => {
    setActiveTab(tab);
  };

  const handleImageScroll = (event) => {
    const slide = Math.ceil(event.nativeEvent.contentOffset.x / event.nativeEvent.layoutMeasurement.width);
    if (slide !== activeImageIndex) {
      setActiveImageIndex(slide);
    }
  };

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ª–∞–π–¥–µ—Ä–∞ –∑–Ω–∞—á–µ–Ω–∏–π
  const ValueSlider = ({ value, min = 0, max = 100, label }) => (
    <View style={styles.sliderContainer}>
      <View style={styles.sliderTrack}>
        <View
          style={[
            styles.sliderFill,
            { width: `${((value - min) / (max - min)) * 100}%` }
          ]}
        />
      </View>
      <View style={styles.sliderLabels}>
        <Text style={styles.sliderMin}>{min}</Text>
        <Text style={styles.sliderValue}>{label}</Text>
        <Text style={styles.sliderMax}>{max}</Text>
      </View>
    </View>
  );

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
  const TemperatureRange = ({ min, max, icon, label }) => (
    <View style={styles.temperatureContainer}>
      <View style={styles.temperatureHeader}>
        <Text style={styles.temperatureIcon}>{icon}</Text>
        <Text style={styles.temperatureLabel}>{label}</Text>
      </View>
      <ValueSlider value={(min + max) / 2} min={0} max={40} label={`${min}¬∞C - ${max}¬∞C`} />
    </View>
  );
  const renderCareInfo = () => (
    <FlatList
      data={careItems}
      keyExtractor={(item) => item.title}
      renderItem={({ item }) => (
        <InfoModule title={item.title} icon={item.icon} content={item.content} />
      )}
    />
  );

  const careItems = [
    {
      title: "–ü–æ–ª–∏–≤",
      icon: plantData.care.watering.icon,
      content: (
        <View>
          <Text style={styles.infoModuleContent}>{plantData.care.watering.text}</Text>
          <View style={styles.infoDetails}>
            <View style={styles.infoDetail}>
              <Text style={styles.infoDetailLabel}>–ß–∞—Å—Ç–æ—Ç–∞:</Text>
              <Text style={styles.infoDetailValue}>{plantData.care.watering.frequency}</Text>
            </View>
            <View style={styles.infoDetail}>
              <Text style={styles.infoDetailLabel}>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</Text>
              <Text style={styles.infoDetailValue}>{plantData.care.watering.amount}</Text>
            </View>
          </View>
        </View>
      ),
    },
    {
      title: "–û—Å–≤–µ—â–µ–Ω–∏–µ",
      icon: plantData.care.light.icon,
      content: (
        <View>
          <Text style={styles.infoModuleContent}>{plantData.care.light.text}</Text>
          <ValueSlider value={plantData.care.light.level} label="–Ø—Ä–∫–æ—Å—Ç—å —Å–≤–µ—Ç–∞" />
        </View>
      ),
    },
    {
      title: "–ê–ª–ª–µ—Ä–≥–∏–∏",
      icon: plantData.care.allergies.icon,
      content: (
        <View>
          <Text style={styles.infoModuleContent}>{plantData.care.allergies.text}</Text>
          <View style={styles.allergiesIcons}>
            {plantData.care.allergies.icons.map((icon, index) => (
              <View key={index} style={styles.allergyIcon}>
                <Text style={styles.allergyIconText}>{icon}</Text>
              </View>
            ))}
          </View>
        </View>),
    },
    {
      title: "–í–ª–∞–∂–Ω–æ—Å—Ç—å",
      icon: plantData.care.humidity.icon,
      content: (
        <View>
          <Text style={styles.infoModuleContent}>{plantData.care.humidity.text}</Text>
          <ValueSlider value={plantData.care.humidity.level} label={`${plantData.care.humidity.level}%`} />
          <Text style={styles.infoModuleContent}>{plantData.care.humidity.recommendation}</Text>
        </View>
      ),
    },
    {
      title: "–ß–∞—Å—Ç—ã–µ –ø—Ä–æ–±–ª–µ–º—ã",
      icon: plantData.care.problems.icon,
      content: (
        <View>
          {plantData.care.problems.list.map((problem, index) => (
            <View key={index} style={styles.problemItem}>
              <Text style={styles.bulletPoint}>‚Ä¢</Text>
              <Text style={styles.infoModuleContent}>{problem}</Text>
            </View>
          ))}
        </View>
      ),
    },
    {
      title: "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ—á–≤–µ",
      icon: plantData.care.soil.icon,
      content: (
        <View>
          <Text style={styles.infoModuleContent}>{plantData.care.soil.text}</Text>
          <View style={styles.soilTable}>
            <View style={styles.tableHeader}>
              <Text style={styles.tableHeaderCell}>–ö–æ–º–ø–æ–Ω–µ–Ω—Ç</Text>
              <Text style={styles.tableHeaderCell}>–ü—Ä–æ–ø–æ—Ä—Ü–∏—è</Text>
            </View>
            {plantData.care.soil.components.map((component, index) => (
              <View key={index} style={styles.tableRow}>
                <Text style={styles.tableCell}>{component.name}</Text>
                <Text style={styles.tableCell}>{component.ratio}</Text>
              </View>
            ))}
          </View>
        </View>
      ),
    },
    {
      title: "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞",
      icon: plantData.care.temperature.icon,
      content: (
        <View>
          <TemperatureRange
            min={plantData.care.temperature.summer.min}
            max={plantData.care.temperature.summer.max}
            icon={plantData.care.temperature.summer.icon}
            label="–õ–µ—Ç–æ–º"
          />
          <TemperatureRange
            min={plantData.care.temperature.winter.min}
            max={plantData.care.temperature.winter.max}
            icon={plantData.care.temperature.winter.icon}
            label="–ó–∏–º–æ–π"
          />
          <TemperatureRange
            min={plantData.care.temperature.indoors.min}
            max={plantData.care.temperature.indoors.max}
            icon={plantData.care.temperature.indoors.icon}
            label="–í –ø–æ–º–µ—â–µ–Ω–∏–∏"
          />
          <TemperatureRange
            min={plantData.care.temperature.outdoors.min}
            max={plantData.care.temperature.outdoors.max}
            icon={plantData.care.temperature.outdoors.icon}
            label="–ù–∞ —É–ª–∏—Ü–µ"
          />
        </View>
      ),
    },
    {
      title: "–¶–≤–µ—Ç–µ–Ω–∏–µ",
      icon: plantData.care.flowering.icon,
      content: (
        <View>
          <Text style={styles.infoModuleContent}>{plantData.care.flowering.text}</Text>
          <View style={styles.infoDetail}>
            <Text style={styles.infoDetailLabel}>–ü–µ—Ä–∏–æ–¥ —Ü–≤–µ—Ç–µ–Ω–∏—è:</Text>
            <Text style={styles.infoDetailValue}>{plantData.care.flowering.period}</Text>
          </View>
        </View>
      ),
    },
    {
      title: "–ü–µ—Ä–µ—Å–∞–¥–∫–∞",
      icon: plantData.care.repotting.icon,
      content: (
        <View>
          <Text style={styles.infoModuleContent}>{plantData.care.repotting.text}</Text>
          <View style={styles.infoDetail}>
            <Text style={styles.infoDetailLabel}>–°–ª–µ–¥—É—é—â–∞—è –ø–µ—Ä–µ—Å–∞–¥–∫–∞:</Text>
            <Text style={styles.infoDetailValue}>{plantData.care.repotting.nextDate}</Text>
          </View>
        </View>
      ),
    },
    {
    },
    {
      title: "–†–∞–∑–º–µ—Ä—ã",
      icon: plantData.care.size.icon,
      content: (
        <View>
          <Text style={styles.infoModuleContent}>{plantData.care.size.text}</Text>
          <View style={styles.infoDetail}>
            <Text style={styles.infoDetailLabel}>–í—ã—Å–æ—Ç–∞:</Text>
            <Text style={styles.infoDetailValue}>
              {plantData.care.size.height.min}-{plantData.care.size.height.max} {plantData.care.size.height.unit}
            </Text>
          </View>
          <View style={styles.infoDetail}>
            <Text style={styles.infoDetailLabel}>–®–∏—Ä–∏–Ω–∞:</Text>
            <Text style={styles.infoDetailValue}>
              {plantData.care.size.width.min}-{plantData.care.size.width.max} {plantData.care.size.width.unit}
            </Text>
          </View>
        </View>
      ),
    },
    {
      title: "–ò—Å—Ç–æ—Ä–∏—è",
      icon: plantData.care.history.icon,
      content: (
        <View>
          <Text style={styles.infoModuleContent}>{plantData.care.history.text}</Text>
          <View style={styles.infoDetail}>
            <Text style={styles.infoDetailLabel}>–ü—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ:</Text>
            <Text style={styles.infoDetailValue}>{plantData.care.history.origin}</Text>
          </View>
        </View>
      ),
    },
    {
      title: "–°–ª–æ–∂–Ω–æ—Å—Ç—å –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è",
      icon: plantData.care.difficulty.icon,
      content: (
        <View>
          <Text style={styles.infoModuleContent}>{plantData.care.difficulty.text}</Text>
          <View style={styles.difficultyStars}>
            {[1, 2, 3, 4, 5].map((star) => (
              <Text
                key={star}
                style={[
                  styles.starIcon,
                  star <= plantData.care.difficulty.level ? styles.filledStar : styles.emptyStar
                ]}
              >
                ‚òÖ
              </Text>
            ))}
          </View>
        </View>
      ),
    },
  ]
  const addNote = () => {
    router.push('/PhenologicalJournal');
  };


  return (
    <SafeAreaView style={styles.container}>
      <ScrollView style={styles.tabContent}>
        {/* –°–ª–∞–π–¥–µ—Ä —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ */}
        <View style={styles.imageSliderContainer}>
          <ScrollView
            horizontal
            pagingEnabled
            showsHorizontalScrollIndicator={false}
            onScroll={handleImageScroll}
            scrollEventThrottle={16}
          >
            {plantData.images.map((image, index) => (
              <Image
                key={index}
                source={{ uri: image }}
                style={styles.plantImage}
              />
            ))}
          </ScrollView>

          {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å–ª–∞–π–¥–µ—Ä–∞ */}
          <View style={styles.pagination}>
            {plantData.images.map((_, index) => (
              <View
                key={index}
                style={[
                  styles.paginationDot,
                  index === activeImageIndex && styles.paginationDotActive
                ]}
              />
            ))}
          </View>
        </View>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å—Ç–µ–Ω–∏–∏ */}
        <View style={styles.plantInfo}>
          <Text style={styles.plantName}>{plantData.name}</Text>
          <Text style={styles.plantLatinName}>{plantData.latinName}</Text>
        </View>

        {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –≤–∫–ª–∞–¥–æ–∫ */}
        <View style={styles.tabsBlock}>
          <TouchableOpacity
            style={[styles.tab, activeTab === 'care' && styles.activeTab]}
            onPress={() => handleTabPress('care')}
          >
            <Text style={[styles.tabText, activeTab === 'care' && styles.activeTabText]}>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —É—Ö–æ–¥–µ</Text>
          </TouchableOpacity>

          <TouchableOpacity
            style={[styles.tab, activeTab === 'todo' && styles.activeTab]}
            onPress={() => handleTabPress('todo')}
          >
            <Text style={[styles.tabText, activeTab === 'todo' && styles.activeTabText]}>Todo</Text>
          </TouchableOpacity>
        </View>

        {/* –ö–æ–Ω—Ç–µ–Ω—Ç –≤–∫–ª–∞–¥–∫–∏ */}
        <View style={styles.contentBlock}>
          {activeTab === 'care' ? renderCareInfo() : <PhenologicalJournal plantName="–ú–æ–π –ø–æ–º–∏–¥–æ—Ä" />}
        </View>
      </ScrollView>
      <View style={styles.footer}>
        {/* –ö–Ω–æ–ø–∫–∞ "Add Plant" */}
        <TouchableOpacity style={styles.addButton}>
          <Text style={styles.addButtonText}>Add Plant</Text>
        </TouchableOpacity>
        {/* –ö–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ" (—Å–µ—Ä–¥–µ—á–∫–æ) */}
        <TouchableOpacity onPress={toggleFavorite} style={styles.favoriteButton}>
          <FontAwesome
            name={isFavorite ? "heart" : "heart-o"}
            size={24}
            color={isFavorite ? "red" : "gray"}
          />
        </TouchableOpacity>


      </View>
    </SafeAreaView>

  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –º–æ–¥—É–ª–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
const InfoModule = ({ title, icon, content }) => (
  <View style={styles.infoModule}>
    <View style={styles.infoModuleHeader}>
      <Text style={styles.moduleIcon}>{icon}</Text>
      <Text style={styles.infoModuleTitle}>{title}</Text>
    </View>
    <View style={styles.infoModuleBody}>
      {content}
    </View>
  </View>
);

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#000',
    padding: 0,
  },
  imageSliderContainer: {
    height: 300,
    position: 'relative',
  },
  plantImage: {
    width,
    height: 300,
    resizeMode: 'cover',
  },
  pagination: {
    flexDirection: 'row',
    position: 'absolute',
    bottom: 20,
    alignSelf: 'center',
  },
  paginationDot: {
    width: 8,
    height: 8,
    borderRadius: 4,
    backgroundColor: 'rgba(255, 255, 255, 0.4)',
    marginHorizontal: 4,
  },
  paginationDotActive: {
    backgroundColor: '#FFF',
  },
  plantInfo: {
    padding: 16,
  },
  plantName: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#FFF',
  },
  plantLatinName: {
    fontSize: 16,
    color: '#AAA',
    fontStyle: 'italic',
  },
  tabsBlock: {
    backgroundColor: '#1E1E1E',
    borderRadius: 20,
    flexDirection: 'row',
    marginHorizontal: 16,
    marginVertical: 12,
    overflow: 'hidden',
  },
  tab: {
    flex: 1,
    paddingVertical: 14,
    alignItems: 'center',
  },
  activeTab: {
    backgroundColor: '#333',
  },
  tabText: {
    fontSize: 14,
    color: '#888',
  },
  activeTabText: {
    color: '#FFF',
    fontWeight: 'bold',
  },
  contentBlock: {
    backgroundColor: '#000',
    borderRadius: 25,
    flex: 1,
    marginBottom: 16,
    overflow: 'hidden',
  },
  tabContent: {
    flex: 1,
    padding: 16,
  },
  infoModule: {
    backgroundColor: '#2A2A2A',
    borderRadius: 12,
    padding: 0,
    marginBottom: 16,
    overflow: 'hidden',
  },
  infoModuleHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#333',
    paddingVertical: 10,
    paddingHorizontal: 16,
  },
  moduleIcon: {
    fontSize: 18,
    marginRight: 10,
  },
  infoModuleTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#FFF',
  },
  infoModuleBody: {
    padding: 16,
  },
  infoModuleContent: {
    fontSize: 14,
    color: '#CCC',
    lineHeight: 20,
  },
  infoDetails: {
    marginTop: 12,
  },
  infoDetail: {
    flexDirection: 'row',
    marginTop: 8,
  },
  infoDetailLabel: {
    fontSize: 14,
    color: '#888',
    width: 140,
  },
  infoDetailValue: {
    fontSize: 14,
    color: '#FFF',
    flex: 1,
  },
  sliderContainer: {
    marginTop: 16,
    marginBottom: 8,
  },
  sliderTrack: {
    height: 6,
    backgroundColor: '#444',
    borderRadius: 3,
  },
  sliderFill: {
    height: 6,
    backgroundColor: '#4CAF50',
    borderRadius: 3,
  },
  sliderLabels: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginTop: 6,
  },
  sliderMin: {
    fontSize: 12,
    color: '#888',
  },
  sliderMax: {
    fontSize: 12,
    color: '#888',
  },
  sliderValue: {
    fontSize: 12,
    color: '#CCC',
  },
  allergiesIcons: {
    flexDirection: 'row',
    marginTop: 12,
  },
  allergyIcon: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: '#444',
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 12,
  },
  allergyIconText: {
    fontSize: 20,
  },
  problemItem: {
    flexDirection: 'row',
    marginBottom: 8,
  },
  bulletPoint: {
    fontSize: 16,
    color: '#CCC',
    marginRight: 8,
    lineHeight: 20,
  },
  soilTable: {
    marginTop: 12,
    borderRadius: 8,
    overflow: 'hidden',
  },
  tableHeader: {
    flexDirection: 'row',
    backgroundColor: '#333',
    paddingVertical: 8,
  },
  tableHeaderCell: {
    flex: 1,
    color: '#FFF',
    fontSize: 14,
    fontWeight: 'bold',
    paddingHorizontal: 12,
  },
  tableRow: {
    flexDirection: 'row',
    borderBottomWidth: 1,
    borderBottomColor: '#444',
    backgroundColor: '#222',
  },
  tableCell: {
    flex: 1,
    color: '#CCC',
    fontSize: 14,
    paddingVertical: 10,
    paddingHorizontal: 12,
  },
  temperatureContainer: {
    marginBottom: 16,
  },
  temperatureHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 8,
  },
  temperatureIcon: {
    fontSize: 16,
    marginRight: 8,
  },
  temperatureLabel: {
    fontSize: 14,
    color: '#CCC',
  },
  colorSwatch: {
    flexDirection: 'row',
    marginTop: 12,
  },
  colorSample: {
    width: 40,
    height: 40,
    borderRadius: 20,
    marginRight: 12,
    borderWidth: 1,
    borderColor: '#444',
  },
  difficultyStars: {
    flexDirection: 'row',
    marginTop: 12,
  },
  starIcon: {
    fontSize: 24,
    marginRight: 8,
  },
  filledStar: {
    color: '#FFD700',
  },
  emptyStar: {
    color: '#444',
  },
  todoItem: {
    backgroundColor: '#2A2A2A',
    borderRadius: 12,
    padding: 16,
    marginBottom: 16,
    flexDirection: 'row',
    alignItems: 'center',
  },
  todoIconContainer: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: '#333',
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 12,
  },
  todoIcon: {
    fontSize: 20,
  },
  todoHeader: {
    flex: 1,
  },
  todoTask: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#FFF',
    marginBottom: 4,
  },
  todoFrequency: {
    fontSize: 14,
    color: '#AAA',
  },
  todoCheckbox: {
    width: 24,
    height: 24,
    borderRadius: 12,
    borderWidth: 2,
    borderColor: '#666',
    marginLeft: 16,
  },
  footer: {
    position: 'absolute',
    bottom: 10,
    left: 0,
    right: 0,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    backgroundColor: '#1E1E1E',
    paddingVertical: 12,
    paddingHorizontal: 20,
    shadowColor: '#000',
    shadowOpacity: 0.1,
    shadowOffset: { width: 0, height: 2 },
    shadowRadius: 4,
    elevation: 5,
  },
  favoriteButton: {
    padding: 10,
  },
  addButton: {
    flex: 1,
    backgroundColor: '#2E7D32',
    paddingVertical: 12,
    marginLeft: 20,
    borderRadius: 30,
    alignItems: 'center',
  },
  addButtonText: {
    color: 'white',
    fontWeight: 'bold',
    fontSize: 16,
  },
});

export default PlantDetailsScreen;